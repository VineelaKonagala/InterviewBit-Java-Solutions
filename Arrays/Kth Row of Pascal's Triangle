/*
Problem Description

Given an index k, return the kth row of the Pascal's triangle.
Pascal's triangle: To generate A[C] in row R, sum up A'[C] and A'[C-1] from previous row R - 1.

Example:

Input : k = 3


Return : [1,3,3,1]

Note: k is 0 based. k = 0, corresponds to the row [1]. 

Note: Could you optimize your algorithm to use only O(k) extra space?
*/


public class Solution {
    public ArrayList<Integer> getRow(int A) {
        ArrayList<Integer> list=new ArrayList<Integer>();
        if(A==0)
        {
            list.add(1);
            return list;
        }
        int p=1;
        list.add(p);
        for(int i=1;i<=A;i++)
        {
            int c=(p*(A-i+1))/i;
            list.add(c);
            p=c;
        }
        return list;
    }
}
